import Head from 'next/head'
import { useState } from 'react';

export default function Home() {

  const today = new Date;
  let [focusedDate, setFocusedDate] = useState(new Date(today));
  let month = today.getMonth();
  let [nextMonth, setNextMonth] = useState(month);
  let year = today.getFullYear();
  let [nextYear, setNextYear] = useState(year);

  function getDaysArray(today) {
    let loopDate = new Date(today.getFullYear(), today.getMonth(), 1);
    let days = [];
    while (loopDate.getMonth() === today.getMonth()) {
      days.push(new Date(loopDate));
      loopDate.setDate(loopDate.getDate() + 1);
    }
    // console.log(days)
    return days;
  }

  let dayArray = getDaysArray(focusedDate);
  let sunday = [];
  let monday = [];
  let tuesday = [];
  let wednesday = [];
  let thursday = [];
  let friday = [];
  let saturday = [];

  function fillCalendar() {
    if (dayArray[0].getDay() > 1 || dayArray[0].getDay() === 0) {
      monday.push("")
    }
    if (dayArray[0].getDay() > 2 || dayArray[0].getDay() === 0) {
      tuesday.push("")
    }
    if (dayArray[0].getDay() > 3 || dayArray[0].getDay() === 0) {
      wednesday.push("")
    }
    if (dayArray[0].getDay() > 4 || dayArray[0].getDay() === 0) {
      thursday.push("")
    }
    if (dayArray[0].getDay() > 5 || dayArray[0].getDay() === 0) {
      friday.push("")
    }
    if (dayArray[0].getDay() > 6 || dayArray[0].getDay() === 0) {
      saturday.push("")
    }
    
  
    for(let i=0; i<dayArray.length; i++) {
      if (dayArray[i].getDay() === 0) { //sunday
        sunday.push(dayArray[i].getDate())
      } else if (dayArray[i].getDay() === 1) { //monday
        monday.push(dayArray[i].getDate())
      } else if (dayArray[i].getDay() === 2) { //tuesday
        tuesday.push(dayArray[i].getDate())
      } else if (dayArray[i].getDay() === 3) { //wednesday
        wednesday.push(dayArray[i].getDate())
      } else if (dayArray[i].getDay() === 4) { //thursday
        thursday.push(dayArray[i].getDate())
      } else if (dayArray[i].getDay() === 5) { //friday
        friday.push(dayArray[i].getDate())
      } else if (dayArray[i].getDay() === 6) { //saturday
        saturday.push(dayArray[i].getDate())
      } else {
        throw "not supposed to happen"
      }
    }
  }

  function getMonthName(month) {
    const monthList = {
      0 : "January",
      1 : "February",
      2 : "March",
      3 : "April",
      4 : "May",
      5 : "June",
      6 : "July",
      7 : "August",
      8 : "September",
      9 : "October",
      10: "November",
      11: "December",
    }
    return monthList[month];
  }

  function changeNextMonth() {
    if (nextMonth === 11) {
      nextYear += 1;
      setNextYear(nextYear);
      nextMonth = 0;
      setNextMonth(nextMonth);
    } else {
      nextMonth += 1;
      setNextMonth(nextMonth);
    }
    setFocusedDate(new Date(nextYear, nextMonth))
    fillCalendar();
  }

  function changePrevMonth() {
    if (nextMonth === 0) {
      nextYear -= 1;
      setNextYear(nextYear);
      nextMonth = 11;
      setNextMonth(nextMonth);
    } else {
      nextMonth -= 1;
      setNextMonth(nextMonth);
    }
    setFocusedDate(new Date(today.getFullYear(), nextMonth))
    fillCalendar();
  }

  fillCalendar();

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <p className="font-medium text-xl">today: {Intl.DateTimeFormat("en-SG").format(today)}</p>
      {/* <p className="font-medium text-xl">array of days: {dayArray.length}</p> */}

      <div className="flex justify-center">
        <div className="w-fit">
          <header className="flex justify-between mb-2">
            <button onClick={changePrevMonth} className="bg-red-200 p-1.5 rounded-md">← prev</button>
            <p className="text-xl font-bold">{getMonthName(nextMonth)}, {nextYear}</p>
            <button onClick={changeNextMonth} className="bg-green-200 p-1.5 rounded-md">next →</button>
          </header>
          <div className="grid grid-cols-7 gap-1 w-fit [&>div>*]:mb-1 [&>div>*]:rounded [&>div>div]:border [&>div>div]:border-slate-300 [&>div>div]:flex [&>div>div]:flex-col [&>div>div]:items-center [&>div>div]:h-32 [&>div>div]:w-32">
            <div>
              <h1 className="bg-slate-300 flex flex-col items-center w-32">Monday</h1>
              {monday.map((k) => <div key={k}>{k}</div>)}
            </div>
            <div>
              <h1 className="bg-slate-300 flex flex-col items-center w-32">Tuesday</h1>
              {tuesday.map((k) => <div key={k}>{k}</div>)}
            </div>
            <div>
              <h1 className="bg-slate-300 flex flex-col items-center w-32">Wednesday</h1>
              {wednesday.map((k) => <div key={k}>{k}</div>)}
            </div>
            <div>
              <h1 className="bg-slate-300 flex flex-col items-center w-32">Thursday</h1>
              {thursday.map((k) => <div key={k}>{k}</div>)}
            </div>
            <div>
              <h1 className="bg-slate-300 flex flex-col items-center w-32">Friday</h1>
              {friday.map((k) => <div key={k}>{k}</div>)}
            </div>
            <div>
              <h1 className="bg-slate-300 flex flex-col items-center w-32">Saturday</h1>
              {saturday.map((k) => <div key={k}>{k}</div>)}
            </div>
            <div>
              <h1 className="bg-slate-300 flex flex-col items-center w-32">Sunday</h1>
              {sunday.map((k) => <div key={k}>{k}</div>)}
            </div>
          </div>
        </div>
      </div>
    </>
  )
}
